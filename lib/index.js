// Generated by CoffeeScript 1.6.3
var matchBar, matchBarColors, matchWindowColors, mkBarColors, mkConfig, mkWindowColors, stripConfig, templates, _;

_ = require('underscore');

_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g
};

templates = {
  windowColors: _.template("client.{{state}} {{border}} {{background}} {{text}} {{indicator}}"),
  barColors: _.template("{{state}} {{border}} {{background}} {{text}}")
};

matchBar = /bar\s*{([^}]*)}/g;

matchBarColors = /\s*colors\s*{[^}]*}/g;

matchWindowColors = /\s*client\.(?:focused|focused_inactive|unfocused|urgent)\s+.*/g;

stripConfig = function(config) {
  return config.replace(matchWindowColors, '').replace(matchBarColors, '');
};

mkWindowColors = function(colors, windowColors) {
  var result;
  result = [];
  _.each(windowColors, function(parts, state) {
    return result.push(templates.windowColors({
      state: state,
      border: colors[parts.border],
      background: colors[parts.background],
      text: colors[parts.text],
      indicator: colors[parts.indicator]
    }));
  });
  return result.join('\n');
};

mkBarColors = function(colors, bar_colors) {
  var result;
  result = [];
  _.each(bar_colors, function(parts, state) {
    if (_.isString(parts)) {
      return result.push("" + state + " " + colors[parts]);
    } else {
      return result.push(templates.barColors({
        state: state,
        border: colors[parts.border],
        background: colors[parts.background],
        text: colors[parts.text]
      }));
    }
  });
  return result.join("\n    ");
};

mkConfig = function(theme, config) {
  config = stripConfig(config);
  config = config.replace(matchBar, function(match, inside) {
    return "bar {\n  " + (inside.trim()) + "\n  colors {\n    " + (mkBarColors(theme.colors, theme.bar_colors)) + "\n  }\n}";
  });
  config += "\n" + (mkWindowColors(theme.colors, theme.window_colors));
  return config;
};

module.exports = {
  mkConfig: mkConfig
};
