#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
var HOME, VERSION, config, exitWithError, fileExists, fs, i3Path, mkConfig, pathUtil, program, sh, theme, themesAvailable, themesDir, themesList, tmpConfigPath, tmpdir, validation, yaml, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

sh = require('shelljs');

program = require('commander');

yaml = require('js-yaml');

pathUtil = require('path');

mkConfig = require('./index').mkConfig;

VERSION = require('../package.json').version;

sh.config.silent = true;

program.version(VERSION).usage('<theme> [options]').option('-c, --config <file>', 'The config file the theme should be applied to. Defaults to the default i3 location.').option('-o, --output <file>', 'Applies the theme, attempts to validate the result, and writes it to <file>. Prints to STDOUT if no output file is given.').option('-l, --list-all', 'Prints a list of all available themes.').parse(process.argv);

themesDir = pathUtil.resolve(__dirname, '../themes');

themesAvailable = sh.ls(themesDir);

if (program.listAll) {
  sh.echo('\n  Available themes:\n');
  themesList = [];
  themesAvailable.forEach(function(themePath) {
    var i, paddedName, theme, _ref;
    theme = yaml.safeLoad(sh.cat(pathUtil.join(themesDir, themePath)));
    paddedName = ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push(themePath[i] || ' ');
      }
      return _results;
    })()).join('');
    return themesList.push("    " + paddedName + " - " + (((_ref = theme.meta) != null ? _ref.description : void 0) || ''));
  });
  sh.echo(themesList.join('\n') + '\n');
  process.exit(0);
}

if (!program.args.length) {
  program.outputHelp();
  process.exit(0);
}

fileExists = function(path) {
  return (path != null) && sh.test('-f', path);
};

exitWithError = function(msg) {
  program.outputHelp();
  process.stderr.write("Error: " + msg);
  return process.exit(1);
};

if (!(fileExists(program.args[0]) || (_ref = program.args[0], __indexOf.call(themesAvailable, _ref) >= 0))) {
  exitWithError("Theme or file not found: " + program.args[0]);
}

theme = (function() {
  var _ref1;
  switch (false) {
    case !program.args[0].match(/\.json$/):
      return JSON.parse(sh.cat(program.args[0]));
    case !(program.args[0].match(/\.yaml$/) || program.args[0].match(/\.yml$/)):
      return yaml.safeLoad(sh.cat(program.args[0]));
    case _ref1 = program.args[0], __indexOf.call(themesAvailable, _ref1) < 0:
      return yaml.safeLoad(sh.cat(pathUtil.join(themesDir, program.args[0])));
    default:
      return yaml.safeLoad(sh.cat(program.args[0]));
  }
})();

if ((program.config != null) && !fileExists(program.config)) {
  exitWithError("Config file not found: " + program.config);
}

HOME = process.env.HOME;

config = (function() {
  switch (false) {
    case !program.config:
      return sh.cat(program.config);
    case !(HOME && fileExists("" + HOME + "/.i3/config")):
      return sh.cat("" + HOME + "/.i3/config");
    case !(HOME && fileExists("" + HOME + "/.config/i3/config")):
      return sh.cat("" + HOME + "/.config/i3/config");
    default:
      return exitWithError("Could not find a valid i3 config file");
  }
})();

config = mkConfig(theme, config);

if (!program.output) {
  sh.echo(config);
  process.exit(0);
}

i3Path = sh.which('i3');

tmpdir = sh.tempdir();

if (i3Path && tmpdir) {
  tmpConfigPath = pathUtil.join(tmpdir, 'i3-style-config');
  fs.writeFileSync(tmpConfigPath, config);
  if (fileExists(tmpConfigPath)) {
    validation = sh.exec("" + i3Path + " -c " + tmpConfigPath + " -C");
    sh.rm(tmpConfigPath);
    if (validation.output.indexOf('ERROR:') > 0 || validation.code > 0) {
      exitWithError("Could not validate output configuration.\n\n" + validation.output);
    }
  }
}

fs.writeFile(program.output, config, function(err) {
  if (err) {
    return exitWithError("Could not write to file: " + program.output + "\n\n" + err);
  }
});
